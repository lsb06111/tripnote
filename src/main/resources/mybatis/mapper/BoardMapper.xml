<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.example.tripnote.dao.BoardDAO">
<select id="listAll" parameterType="BoardParamDTO" resultType="BoardDto">
   SELECT
	    b.id,
	    b.title,
	    board_content,
	    to_char(b.created_at,'YYYY"."MM"."dd') as createdAt,
	    to_char(b.modified_at,'YYYY"."MM"."dd') as modifiedAt,
	    u.username,
	    u.nickname,
	    a.area_name,
	    b.thumbnail,
	    l.likes
	FROM
    	board b
        JOIN users  u ON b.user_id = u.id
        JOIN course c ON b.course_id = c.id
        JOIN area   a ON c.area_id = a.id
        LEFT JOIN (
            SELECT
                board_id,
                COUNT(*) AS likes
            FROM
                likes
            GROUP BY
                board_id
        )   l ON b.id = l.board_id
    
    <where>
    	<if test="loc != null and loc != '' and loc != 'undefined'">
    		and c.area_id in 
    		 (	SELECT
			    	id
				FROM
				    area
				WHERE
				    parent_id = (
				        SELECT
				            id
				        FROM
				            area
				        WHERE
				            area_name = #{loc})
             )
    	</if>
    	<if test="keyword != null and keyword != ''">
    		and (b.title like '%' || #{keyword} || '%'
    			or b.board_content like '%' || #{keyword} || '%'
    			or a.area_name like '%' || #{keyword} || '%')
    	</if>
    	and b.is_visible = 1
    	and b.is_private = 0
    	and b.is_draft = 0
    </where>
    <choose>
	    <when test="order == 'latest'">
	    	ORDER BY b.created_at DESC
	    </when>
	    <when test="order == 'like'">
	     	ORDER BY l.likes DESC NULLS LAST
	    </when>
	    <otherwise>
	     	ORDER BY b.created_at DESC
	    </otherwise>
    </choose>
    offset #{offset} rows
    fetch next #{size} rows only
</select>

<select id="countListAll" parameterType="BoardParamDTO" resultType="int">
   SELECT 
		count(*)
	FROM
    	board b
        JOIN users  u ON b.user_id = u.id
        JOIN course c ON b.course_id = c.id
        JOIN area   a ON c.area_id = a.id
        LEFT JOIN (
            SELECT
                board_id,
                COUNT(*) AS likes
            FROM
                likes
            GROUP BY
                board_id
        )   l ON b.id = l.board_id
    
    <where>
    	<if test="loc != null and loc != '' and loc != 'undefined'">
    		and area_name = #{loc}
    	</if>
    	<if test="keyword != null and keyword != ''">
    		and (b.title like '%' || #{keyword} || '%'
    			or b.board_content like '%' || #{keyword} || '%'
    			or a.area_name like '%' || #{keyword} || '%')
    	</if>
 	    and b.is_visible = 1
    	and b.is_private = 0
    	and b.is_draft = 0
    </where>
</select>

<insert id="save" parameterType="NewBoardDTO" useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
	insert into board (title, board_content, user_id, course_id, thumbnail)
	values (#{title}, #{intro}, #{userId}, #{courseId}, #{thumbnail})
</insert>

<insert id="saveDraft" parameterType="NewBoardDTO">
	insert into board (title, board_content, user_id, course_id, is_draft)
	values (#{title}, #{intro}, #{userId}, #{courseId}, 1)
</insert>

<select id="getBoardById" parameterType="int" resultType="boardDto">
	select *
	from board
	where id = #{id}
</select>

<select id="getBoardInfoById" parameterType="int" resultType="boardDto">
	select *
	from board b
	join users u on b.user_id = u.id
	join course c on b.course_id = c.id
	join area a on c.area_id = a.id
	left join likes l on b.id = l.board_id
	where b.id = #{id}
</select>

<select id="getBoardContentsByBoardId" parameterType="int" resultType="BoardDetailDTO">
	SELECT
	    r.id as reviewContentId, r.review_content as content, r.is_draft, r.img as imgSrc, r.orders,
	    t.id as tourLocId, t.tour_loc_name, t.start_time, t.end_time, t.type_name, t.tour_nth,
	    c.title as courseTitle, c.start_date, c.end_date, a.area_name
	FROM
	         board b
	    JOIN course         c ON b.course_id = c.id
	    JOIN tour_loc       t ON c.id = t.course_id
	    JOIN review_content r ON t.id = r.tour_loc_id
	    join area a on c.area_id = a.id 
	WHERE
	        b.id = #{id}
</select>

</mapper>